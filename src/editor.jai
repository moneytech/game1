
#scope_file

selected_points_mesh: *Mesh;
selected_points_indices: [..] u32;
picking_position_buf: [] s32;

__terrain: *Mesh;
terrain_map: Height_Map;

Tool_Mode :: enum u16 {
    VERTEX_PICK;
    BRUSH_ADD;
    BRUSH_SUBTRACT;
    BRUSH_SPHERE_ADD;
    BRUSH_SPHERE_SUBTRACT;
    BRUSH_TEXTURE_PAINT;
}

Action :: enum {
    NONE;
    DRAG;
    ROLL;
}

action_info: struct {
    drag: struct {
        delta_position: Vector3;
        xyz_lock: Vector3;
    };

    roll: struct {
        delta_rotation: Quaternion = ---;
        xyz_lock: Vector3;
    };

};
editor_action: Action;

editor_action_is_valid_for_object :: (object: *Scene_Object) -> bool {
    return true;
}

editor_apply_action_to_object :: (object: *Scene_Object) {
    if editor_action == Action.DRAG {
        if object.object_type == Actor {
            actor := cast(*Actor) object;
            if actor.body then actor.body.position += action_info.drag.delta_position;
        }

        object.position += action_info.drag.delta_position;
    } else if editor_action == Action.ROLL {
        if object.object_type == Actor {
            actor := cast(*Actor) object;
            actor.orientation *= action_info.roll.delta_rotation;
        }
    }
}


under_cursor: s32 = -1;
terrain_texture: Texture;
terrain_texture_buffer: [512 * 512] u32;
tool_brush_add_sub_vector: Vector3;
tool_brush_radius := 10.0;
current_tool_mode := Tool_Mode.BRUSH_TEXTURE_PAINT;
draw_line_overlay := false;
texture_paint_color: u32 = 0xFF1A8B53;

collect_indices_around_circle :: (map: Height_Map, p: Vector2, radius: float) {
    array_reset(*selected_points_indices);
    reset_mesh_arrays(selected_points_mesh);
    // @Speed better circle picking
    for y: 0..terrain_map.height-1 {
        for x: 0..terrain_map.width-1 {
            in: u32 = xx (x + y * terrain_map.width); 
            cur := make_Vector2(xx x, xx y);
            if length(cur - p) < radius {
                add_point(selected_points_mesh, map.vertices[in]);
                array_add(*selected_points_indices, in);
            }
        }
    }

    store_mesh_in_buffer(selected_points_mesh, true);
}

selected_game_object: *Scene_Object;

#scope_export

__terrain_line_mesh: *Mesh;

add_point :: (m: *Mesh, p: Vector3) {
    array_add(*m.vertices, p);
    array_add(*m.normals, make_Vector3(0, 0, 0));
}

update_point_mesh :: (m: *Mesh, map: Height_Map, indices: [] u32) {
	reset_mesh_arrays(m);

	for indices {
		array_add(*m.vertices, map.vertices[it]);
	}

	store_mesh_in_buffer(m);
}

init_editor :: (game: *Game) {
    picking_position_buf.count = game.window.width * game.window.height;
    picking_position_buf.data = alloc(picking_position_buf.count*size_of(s32));
    action_info.drag.xyz_lock = make_Vector3(1, 1, 1);
    action_info.roll.xyz_lock = make_Vector3(1, 1, 1);

    action_info.roll.delta_rotation = set_angle_vector(0, 0, 1, 0);

    /*
    m := Mesh.new();
    m.material = Material.new();
    m.material.diffuse = make_Color(1.0, 0.5, 0.0);
    m.primitive_type = Primitive_Type.POINTS;

    selected_points_mesh = m;

    tool_brush_add_sub_vector = make_Vector3(0.0, 0.2, 0.0);

    // terrain_map, __terrain = new_terrain_map(128, 128);
    terrain_map, __terrain = load_heightmap(game.asset_man, "assets/heightmap.png");
    __terrain_line_mesh = Mesh.new();
    <<__terrain_line_mesh = generate_terrain_line_mesh(terrain_map);

    for * terrain_texture_buffer {
        <<it = 0xFFFFFFFF;
    }
    create_texture(*terrain_texture, 512, 512, terrain_texture_buffer.data, Texture.RGBA);
    __terrain.material.textures[TEXTURE_DIFFUSE_INDEX] = *terrain_texture;
    */
}

draw_scene_with_pick_id :: (rdr: *GL_Renderer, sc: Scene) {
    for sc.actors {
        if it.model {
            orient := matrix_rotate(it.orientation);
            it.model.model_matrix = matrix_translate(it.position) * orient;
        }

        if it.model {
            draw_picking_model(rdr, <<it.model, it.object_id);
        } else {
            logprint("Editor", "Warning: Actor % has no model!\n", it.object_id);
        }
    }

    light_sphere_mat := rdr.light_sphere.model_matrix;
    defer rdr.light_sphere.model_matrix = light_sphere_mat;
    for sc.lights {
        rdr.light_sphere.model_matrix = matrix_translate(it.position.x, it.position.y, it.position.z);
        draw_picking_model(rdr, <<rdr.light_sphere, it.object_id);
    }

    // @TODO lights and light picking mesh
    // @OTOD cameras and camera meshes
    // for sc.models draw_picking_model(rdr, <<it, cast(s32) (it_index+1));
}

#scope_file

to_nk_colorf :: (c: Color) -> nk_colorf {
    out: nk_colorf;
    out.r = c.r;
    out.g = c.g;
    out.b = c.b;
    out.a = c.a;
    return out;
}

color_chooser_combo_box :: (nuklear: *nk_context, color_current: Color) -> Color {

    combo_color2 := to_nk_colorf(color_current);
    if (nk_combo_begin_color(nuklear, nk_rgb_cf(combo_color2), _nk_vec2(200,400))) {
        using color_mode :: enum {
            COL_RGB;
            COL_HSV;
        }
        col_mode := COL_RGB;

        nk_layout_row_dynamic(nuklear, 120, 1);
        combo_color2 = nk_color_picker(nuklear, combo_color2, NK_RGBA);
        
        nk_layout_row_dynamic(nuklear, 25, 2);

        // if nk_option_label(nuklear, "RGB", cast(s32) (col_mode == COL_RGB)) then col_mode = COL_RGB;
        // if nk_option_label(nuklear, "HSV", cast(s32) (col_mode == COL_HSV)) then col_mode = COL_HSV;

        nk_layout_row_dynamic(nuklear, 25, 1);
        if (col_mode == COL_RGB) {
            combo_color2.r = nk_propertyf(nuklear, "#R:", 0, combo_color2.r, 1.0, 0.01, 0.005);
            combo_color2.g = nk_propertyf(nuklear, "#G:", 0, combo_color2.g, 1.0, 0.01, 0.005);
            combo_color2.b = nk_propertyf(nuklear, "#B:", 0, combo_color2.b, 1.0, 0.01, 0.005);
            combo_color2.a = nk_propertyf(nuklear, "#A:", 0, combo_color2.a, 1.0, 0.01, 0.005);
        } else {
            hsva: [4] float;
            nk_colorf_hsva_fv(hsva.data, combo_color2);
            hsva[0] = nk_propertyf(nuklear, "#H:", 0, hsva[0], 1.0, 0.01, 0.05);
            hsva[1] = nk_propertyf(nuklear, "#S:", 0, hsva[1], 1.0, 0.01, 0.05);
            hsva[2] = nk_propertyf(nuklear, "#V:", 0, hsva[2], 1.0, 0.01, 0.05);
            hsva[3] = nk_propertyf(nuklear, "#A:", 0, hsva[3], 1.0, 0.01, 0.05);
            combo_color2 = nk_hsva_colorfv(hsva.data);
        }
        nk_combo_end(nuklear);
    }

    return make_Color(combo_color2);
}

do_material_properties :: (nuklear: *nk_context, material: *Material) {
    nk_layout_row_dynamic(nuklear, 30, 2);
                
    nk_label(nuklear, "Base Color:", NK_TEXT_LEFT);
    material.diffuse = color_chooser_combo_box(nuklear, material.diffuse);

    nk_layout_row_begin(nuklear, NK_STATIC, 50, 1);
    nk_layout_row_push(nuklear, 200);
    material.roughness = nk_propertyf(nuklear, "#Roughness:", 0, material.roughness, 1.0, 0.01, 0.005);

    nk_layout_row_push(nuklear, 200);
    material.metallic = nk_propertyf(nuklear, "#Metallic:", 0, material.metallic, 1.0, 0.01, 0.005);
}

#scope_export


update_editor :: (game: *Game, dt: float) {
    input_intercepted := false;
    if selected_game_object {
        using game;

        // if nk_begin(*nuklear, "Scene", _nk_rect(50, 50, 300, 400), xx
        //         (NK_WINDOW_BORDER|NK_WINDOW_MOVABLE|NK_WINDOW_CLOSABLE)) {

        // }

        // if nk_input_is_mouse_hovering_rect(*nuklear.input, nk_window_get_bounds(*nuklear)) {
        //     input_intercepted = true;
        // }

        if selected_game_object.object_type == Actor {
            actor := cast(*Actor) selected_game_object;

            if (nk_begin(*nuklear, "Actor", _nk_rect(50, 50, 400, 400), (NK_WINDOW_BORDER|NK_WINDOW_MOVABLE|NK_WINDOW_CLOSABLE)) ) {
                do_material_properties(*nuklear, actor.model.meshes[0].material);
            }

            nk_end(*nuklear);
        } else if selected_game_object.object_type == Light {
            light := cast(*Light) selected_game_object;

            if (nk_begin(*nuklear, "Light", _nk_rect(50, 50, 400, 400), (NK_WINDOW_BORDER|NK_WINDOW_MOVABLE|NK_WINDOW_CLOSABLE)) ) {
                /* fixed widget pixel width */
                nk_layout_row_dynamic(*nuklear, 200, 1);
    
                col := nk_color_picker(*nuklear, to_nk_colorf(light.radiance), NK_RGB);
                light.radiance = make_Color(col);

                // @OTOD not valid for directional lights
                nk_layout_row_dynamic(*nuklear, 50, 1);
                light.radius = nk_propertyf(*nuklear, "#Radius:", 0, light.radius, 100000.0, 0.1, 0.05);
                // nk_slider_float(*nuklear, 0.0, *actor.model.meshes[0].material.metallic, 1.0, 0.01);
            }

            nk_end(*nuklear);
        }
    }

    if nk_window_is_any_hovered(*game.nuklear) {
        input_intercepted = true;
    }

    if input_intercepted return;

    game.renderer.projection_matrix = matrix_perspective(game.fov, cast(float) game.window.width/cast(float) game.window.height, game.near_plane, game.far_plane);
    x, y, success := get_mouse_pointer_position(true);
    if !success return;

    update_camera(game, dt);

    renderer := game.renderer;

    using Key_Current_State;

    /*
    if current_tool_mode == Tool_Mode.VERTEX_PICK {
        if input_button_states[Key_Code.MOUSE_BUTTON_LEFT] & START {
            if success {
                assert(x >= 0 && x < game.window.width);
                assert(y >= 0 && y < game.window.height);

                assert(false); // @FixMe to use position data
                index: u32;
                if index > (terrain_map.width * terrain_map.height) {
                    return;
                }

                // print("i: %, ix: %, iy: %\n", index, index % xx terrain_map.width, index / xx terrain_map.width);

                // @TODO check if point is already in array
                add_point(selected_points_mesh, terrain_map.vertices[index]);
                store_mesh_in_buffer(selected_points_mesh);
                array_add(*selected_points_indices, index);
            }
        }

        if input_button_states[#char "Z"] & DOWN {
        	delta := make_Vector3(xx mouse_delta_x, xx -mouse_delta_y, 0);
            q := game.renderer.camera.rotation;

            delta = mul(delta, make_Vector3(1.0/cast(float)game.window.width, 1.0/cast(float)game.window.height, 0)); // nomalize pixels to viewport
            sx, sy := viewport_scale(game.fov, cast(float)game.window.width / cast(float)game.window.height, 1.0);
            delta = mul(delta, make_Vector3(sx, sy, 1)) * 20;

        	for selected_points_indices {
        		vert_current := terrain_map.vertices[it];
        		out := vert_current + delta;
        		terrain_map.vertices[it] = out;
        	}

        	update_point_mesh(selected_points_mesh, terrain_map, selected_points_indices);
        	generate_terrain_mesh(terrain_map, __terrain);
            generate_terrain_line_mesh(terrain_map, __terrain_line_mesh);
        }
    } else if current_tool_mode == Tool_Mode.BRUSH_ADD || current_tool_mode == Tool_Mode.BRUSH_SUBTRACT {
        if !(x >= 0 && x < game.window.width) return;
        if !(y >= 0 && y < game.window.height) return;
        collect_indices_around_circle(terrain_map, picking_position_buf[in], tool_brush_radius);

        if input_button_states[Key_Code.MOUSE_BUTTON_LEFT] & DOWN {
            delta := tool_brush_add_sub_vector;
            if current_tool_mode == Tool_Mode.BRUSH_SUBTRACT delta = -delta;
            for selected_points_indices {
                vert_current := terrain_map.vertices[it];
                out := vert_current + delta;
                terrain_map.vertices[it] = out;
            }

            update_point_mesh(selected_points_mesh, terrain_map, selected_points_indices);
            generate_terrain_mesh(terrain_map, __terrain);
            generate_terrain_line_mesh(terrain_map, __terrain_line_mesh);
        }
    } else if current_tool_mode == Tool_Mode.BRUSH_SPHERE_ADD || current_tool_mode == Tool_Mode.BRUSH_SPHERE_SUBTRACT {
        if !(x >= 0 && x < game.window.width) return;
        if !(y >= 0 && y < game.window.height) return;
        p := picking_position_buf[in];
        collect_indices_around_circle(terrain_map, p, tool_brush_radius);

        if input_button_states[Key_Code.MOUSE_BUTTON_LEFT] & DOWN {
            for selected_points_indices {
                x := it % terrain_map.width;
                y := it / terrain_map.width;
                cur := make_Vector2(xx x, xx y);

                // not technically spherical, but achieves a good enough effect
                d := length(cur - p) / tool_brush_radius;
                delta := mul(make_Vector3(0, (1.0 - d), 0), tool_brush_add_sub_vector);
                if current_tool_mode == Tool_Mode.BRUSH_SPHERE_SUBTRACT delta = -delta;

                vert_current := terrain_map.vertices[it];
                out := vert_current + delta;
                terrain_map.vertices[it] = out;
            }

            update_point_mesh(selected_points_mesh, terrain_map, selected_points_indices);
            generate_terrain_mesh(terrain_map, __terrain);
            generate_terrain_line_mesh(terrain_map, __terrain_line_mesh);
        }
    } else if current_tool_mode == Tool_Mode.BRUSH_TEXTURE_PAINT {
        if !(x >= 0 && x < game.window.width) return;
        if !(y >= 0 && y < game.window.height) return;
        p := picking_position_buf[in];
        collect_indices_around_circle(terrain_map, p, tool_brush_radius);

        // project p into texture space
        p.x = (p.x / cast(float) terrain_map.width) * terrain_texture.width;
        p.y = (p.y / cast(float) terrain_map.height) * terrain_texture.height;
        // I'm not sure how to transform this if we have differing width/height of the map
        brush_radius := (tool_brush_radius / cast(float) terrain_map.width) * terrain_texture.width;

        brush_x := cast(s32) (p.x - brush_radius);
        brush_xw := cast(s32) (p.x + brush_radius);
        brush_y := cast(s32) (p.y - brush_radius);
        brush_yh := cast(s32) (p.y + brush_radius);

        if brush_x < 0 brush_x = 0;
        if brush_y < 0 brush_y = 0;
        if brush_xw >= xx terrain_texture.width brush_xw = xx (terrain_texture.width-1);
        if brush_yh >= xx terrain_texture.height brush_yh = xx (terrain_texture.height-1);

        if input_button_states[Key_Code.MOUSE_BUTTON_LEFT] & DOWN {
            
            for y_p: brush_y..brush_yh {
                for x_p: brush_x..brush_xw {
                    o := make_Vector2(cast(float) x_p, cast(float) y_p);
                    if length(p - o) < brush_radius {
                        x_in: u32 = xx o.x;
                        y_in: u32 = xx o.y;

                        terrain_texture_buffer[x_in + y_in * terrain_texture.width] = texture_paint_color;
                    }
               }
            }

            update_texture(*terrain_texture, terrain_texture_buffer.data);
            update_point_mesh(selected_points_mesh, terrain_map, selected_points_indices);
            generate_terrain_mesh(terrain_map, __terrain);
            generate_terrain_line_mesh(terrain_map, __terrain_line_mesh);
        }
    }
    */

    under_cursor = -1;
    if !(x >= 0 && x < game.window.width) return;
    if !(y >= 0 && y < game.window.height) return;
    

    if selected_game_object {
        obj := selected_game_object;

        if input_button_states[#char "G"] & START && editor_action != Action.DRAG {
            editor_action = Action.DRAG;
            action_info.drag.xyz_lock = make_Vector3(1, 1, 1);
            action_info.drag.delta_position = make_Vector3(0, 0, 0);
        }

        if input_button_states[#char "R"] & START && editor_action != Action.DRAG {
            editor_action = Action.ROLL;
            action_info.roll.xyz_lock = make_Vector3(1, 1, 1);
            action_info.roll.delta_rotation = set_angle_vector(0, 0, 1, 0);
        }

        if editor_action == Action.DRAG {

            if input_button_states[Key_Code.MOUSE_BUTTON_LEFT] & START {
                // apply the action
                editor_apply_action_to_object(obj);
                editor_action = Action.NONE;
                return;
            }

            if input_button_states[Key_Code.MOUSE_BUTTON_RIGHT] & START {
                editor_action = Action.NONE;
                return;
            }

            // @TODO maybe in these we only reset the part of the target position that the user doesn't want to affect
            // that way preserving the movement along the desired axis that has already been done
            if input_button_states[#char "X"] & START {
                action_info.drag.xyz_lock = make_Vector3(1, 0, 0);
                action_info.drag.delta_position = make_Vector3(0, 0, 0);
            }

            if input_button_states[#char "Y"] & START {
                action_info.drag.xyz_lock = make_Vector3(0, 1, 0);
                action_info.drag.delta_position = make_Vector3(0, 0, 0);
            }

            if input_button_states[#char "Z"] & START {
                action_info.drag.xyz_lock = make_Vector3(0, 0, 1);
                action_info.drag.delta_position = make_Vector3(0, 0, 0);
            }

            delta := make_Vector3(xx -mouse_delta_x, xx mouse_delta_y, 0);
            delta = mul(delta, make_Vector3(1.0/cast(float)game.window.width, 1.0/cast(float)game.window.height, 0)); // nomalize pixels to viewport
            // sx, sy := viewport_scale(game.fov, cast(float)game.window.width / cast(float)game.window.height, 1.0);
            // delta = mul(delta, make_Vector3(sx, sy, 1));

            len := length(obj.position - game.renderer.camera.position);
            delta *= len;

            q := game.renderer.camera.rotation;
            delta = q * delta;

            delta = delta 'mul' action_info.drag.xyz_lock;
            action_info.drag.delta_position -= delta;
        } else if editor_action == Action.ROLL {
            if input_button_states[Key_Code.MOUSE_BUTTON_LEFT] & START {
                // apply the action
                editor_apply_action_to_object(obj);
                editor_action = Action.NONE;
                return;
            }

            if input_button_states[Key_Code.MOUSE_BUTTON_RIGHT] & START {
                editor_action = Action.NONE;
                return;
            }

            // @TODO maybe in these we only reset the part of the target position that the user doesn't want to affect
            // that way preserving the movement along the desired axis that has already been done
            if input_button_states[#char "X"] & START {
                action_info.roll.xyz_lock = make_Vector3(1, 0, 0);
                action_info.roll.delta_rotation = set_angle_vector(0, 0, 1, 0);
            }

            if input_button_states[#char "Y"] & START {
                action_info.roll.xyz_lock = make_Vector3(0, 1, 0);
                action_info.roll.delta_rotation = set_angle_vector(0, 0, 1, 0);
            }

            if input_button_states[#char "Z"] & START {
                action_info.roll.xyz_lock = make_Vector3(0, 0, 1);
                action_info.roll.delta_rotation = set_angle_vector(0, 0, 1, 0);
            }

            delta := make_Vector3(xx mouse_delta_x, xx mouse_delta_y, 0);
            delta = mul(delta, make_Vector3(1.0/cast(float)game.window.width, 1.0/cast(float)game.window.height, 0)); // nomalize pixels to viewport
            // sx, sy := viewport_scale(game.fov, cast(float)game.window.width / cast(float)game.window.height, 1.0);
            // delta = mul(delta, make_Vector3(sx, sy, 1));

            angle := length(delta);

            q := game.renderer.camera.rotation;
            axis := q * make_Vector3(xx mouse_delta_y, xx -mouse_delta_x, 0);

            mask := action_info.roll.xyz_lock;
            quat := set_angle_vector(-angle * 1, axis.x * mask.x, axis.y * mask.y, axis.z * mask.z);

            action_info.roll.delta_rotation *= quat;
        }
    } else {
        editor_action = Action.NONE;
    }

    if input_button_states[Key_Code.MOUSE_BUTTON_LEFT] & START {
        if picking_position_buf.count != game.window.width*game.window.height {
            free(picking_position_buf.data);
            picking_position_buf.count = game.window.width * game.window.height;
            picking_position_buf.data = alloc(picking_position_buf.count*size_of(s32));
        }

        start_picking(renderer);
        draw_scene_with_pick_id(renderer, <<game.current_scene);
        finish_picking(renderer);
        get_picking_position_data(<<renderer, picking_position_buf.data);

        in := (y * game.window.width) + x;
        under_cursor = picking_position_buf[in];
        if under_cursor != -1 {
            selected_game_object = find_object_by_id(game.current_scene, under_cursor);
        } else {
            selected_game_object = null;
        }
    }
}

/*
render_editor_scene :: (using game: *Game, water := false) {
    start_scene(renderer);
    clear_screen(0.5, 0.5, 0.5, 1.0);
    // renderer->draw_cube(0, 0, -2, 1);
    // draw_model(<<renderer, <<__model);
    __terrain.material.diffuse = make_Color(0.8, 0.8, 0.8);
    __terrain_line_mesh.material.diffuse = make_Color(0.0, 0.0, 0.0);
    draw_mesh(<<renderer, <<__terrain);
    if draw_line_overlay draw_mesh(<<renderer, <<__terrain_line_mesh);
    set_point_size(<<renderer, 5.0);
    draw_mesh(<<renderer, <<selected_points_mesh);

    if water {
        draw_water(<<renderer, water_dudv_texture, WATER_HEIGHT);
    }
    finish_scene(renderer);
    set_clip_plane(renderer, false);
}
*/

render_editor :: (using game: *Game) {

    if selected_game_object {
        if selected_game_object.object_type == Actor {
            actor := cast(*Actor) selected_game_object;

            if selected_game_object then actor.model.draw_mode = DRAW_MODE_SOLID_AND_WIREFRAME;

            old_position: Vector3;
            old_rotation: Quaternion;
            if editor_action == Action.DRAG {
                old_position = actor.position;
                actor.position += action_info.drag.delta_position;
            } else if editor_action == Action.ROLL {
                old_rotation = actor.orientation;
                actor.orientation *= action_info.roll.delta_rotation;
            }

            render_game(game);

            if editor_action == {
                case Action.DRAG; actor.position = old_position;
                case Action.ROLL; actor.orientation = old_rotation;
            }

            if selected_game_object then actor.model.draw_mode = DRAW_MODE_SOLID;
        } else if selected_game_object.object_type == Light {
            light := cast(*Light) selected_game_object;

            // light_model := game.renderer.light_model;

            // if selected_game_object then light_model.draw_mode = DRAW_MODE_SOLID_AND_WIREFRAME;

            old_position: Vector3;
            if editor_action == Action.DRAG {
                old_position = light.position;
                light.position += action_info.drag.delta_position;
            }

            render_game(game);

            if editor_action == Action.DRAG {
                light.position = old_position;
            }

            // if selected_game_object then light_model.draw_mode = DRAW_MODE_SOLID;
        }
    } else {
        render_game(game);
    }

    game.renderer.projection_matrix = matrix_perspective(game.fov, cast(float) game.window.width/cast(float) game.window.height, game.near_plane, game.far_plane);
    game.renderer.view_matrix = matrix_rotate(inverse(renderer.camera.rotation)) * matrix_translate(-renderer.camera.position);
    for renderer.lights {
        if it.type == Light_Type.DIRECTIONAL {
            // @TODO use a different texture to differentiate between point and directional light objects
            mat := matrix_translate(it.position.x, it.position.y, it.position.z) * matrix_rotate((renderer.camera.rotation)) * matrix_scale(1, -1, 1);
            // draw_textured_rect(rdr, null, it.position.x, it.position.y, 1.0, 1.0, null, *mat);
            white := make_Color(1, 1, 1);
            // glDisable(GL_DEPTH_TEST);
            glDisable(GL_CULL_FACE);
            glEnable(GL_BLEND);
            glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
            draw_textured_rect(<<renderer, renderer.light_entity_texture, -0.5, -0.5, 1.0, 1.0, null, *mat);

            glDisable(GL_BLEND);
            glEnable(GL_CULL_FACE);
        } else {
            mat := matrix_translate(it.position.x, it.position.y, it.position.z) * matrix_rotate((renderer.camera.rotation)) * matrix_scale(1, -1, 1);
            // draw_textured_rect(rdr, null, it.position.x, it.position.y, 1.0, 1.0, null, *mat);
            white := make_Color(1, 1, 1);
            // glDisable(GL_DEPTH_TEST);
            glDisable(GL_CULL_FACE);
            glEnable(GL_BLEND);
            glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
            draw_textured_rect(<<renderer, renderer.light_entity_texture, -0.5, -0.5, 1.0, 1.0, null, *mat);

            glDisable(GL_BLEND);
            glEnable(GL_CULL_FACE);
        }
    }

    // renderer.projection_matrix = matrix_ortho(0, 1, 0, 1, -1, 1);
    // draw_textured_rect(<<renderer, water_reflect_frame_buffer.color_texture, 0, 0, 0.25, 0.25);
    // draw_textured_rect(<<renderer, water_refract_frame_buffer.color_texture, 0, 0.25, 0.25, 0.25);

    renderer.projection_matrix = matrix_ortho(0, xx game.window.width, xx game.window.height, 0, -1, 1);
    renderer.view_matrix = matrix_identity();

    white := make_Color(1, 1, 1);
    // glDisable(GL_DEPTH_TEST);
    glDisable(GL_CULL_FACE);
    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    // draw_textured_rect(<<renderer, *renderer.lights[0].csm_shadow_map, 10, 10, 400.0*2, 100.0*2, null, null);

    glDisable(GL_BLEND);
    glEnable(GL_CULL_FACE);

    render_imgui(game.renderer, *nuklear);
    nk_clear(*nuklear);
}
